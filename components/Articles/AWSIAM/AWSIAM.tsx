'use client';
import Image from 'next/image';

import PageHeader from '@/components/PageHeader/PageHeader';
import styles from '../Articles.module.scss';
import sharedStyles from '../../SharedCss/SharedCss.module.scss';
import Tags from '@/components/Tags/Tags';

import iamLogo from '../../pictures/iam.png';
import iamOne from '../../pictures/iam-1.png';
import iamTwo from '../../pictures/iam-2.png';
import iamThree from '../../pictures/iam-3.png';
import iamFour from '../../pictures/iam-4.png';

import { imageLoader } from '@/utils/imageLoader';
import ReturnArrow from '@/components/ReturnArrow/ReturnArrow';

export default function AWSIAM(): JSX.Element {
  const {
    innerWrapper,
    imageWrapper,
    altText,
    text,
    code,
    noDots,
    figure,
    firstInner,
    secondInner,
    firstGist,
    secondGist,
    thirdGist,
    fourthGist,
    grey,
  } = styles;
  const { tenPadding, width75, minus10LeftMargin } = sharedStyles;

  return (
    <div id="aws-iam" className={`${tenPadding}`}>
      <PageHeader headerName="article" hideLinks={false} />
      <div className={`${width75} ${innerWrapper}`}>
        <h1>AWS IAM â€” Quick Dive/Quick Guide</h1>
        <div className={imageWrapper}>
          <Image
            alt="IAM logo"
            loader={imageLoader}
            src={iamLogo}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
          <p className={altText}>AWS IAM Logo</p>
        </div>
        <p className={text}>
          At work I recently presented to a group of my peers on the subject of
          AWS IAM. I did so from the perspective of how we at Pluralsight use
          the service. Here you&apos;ll find an adapted version of that
          presentation. Let&apos;s dive right in!
        </p>
        <h2>What is IAM?</h2>
        <p className={text}>
          IAM is one of the many AWS services. It is an acronym for Identity and
          Access Management. As a key AWS service it helps you manage user
          identities and control access to your AWS resources. Those resources
          could be in: databases, EC2, S3, etc. It allows you to securely
          control who can access your resources, as well as what actions they
          can perform. For example, if we want a user to only be able to get
          data from a data store we can specify via an IAM policy that this
          user/role can only do that. Thereby, excluding the permissions of
          modifying and deleting. This is extremely powerful. It is based on the
          premise of least privilege.
        </p>
        <h2>Key Features and Concepts</h2>
        <ol>
          <li className={text}>
            <p>Users and Groups</p>
            <ul>
              <li className={text}>
                Represent people or applications that require access to AWS
                resources. Each user is assigned unique credentials to
                authenticate their identity.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Roles</p>
            <ul>
              <li className={text}>
                Used to grant permissions to entities within AWS, meaning to
                services or external applications, rather than individual users.
              </li>
              <li className={text}>
                Roles allow secure access to resources without sharing long-term
                credentials. When dealing with roles we don&apos;t have to
                rotate access keys or keep up with credentials when using them.
              </li>
              <li className={text}>
                Users can assume a role that has permissions to do what they
                need. Roles can also assume roles.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Policies</p>
            <p>
              {' '}
              When we talk about IAM if users, groups, and roles are the bones,
              it could be argued that policies are the meat of IAM.
            </p>
            <ul>
              <li className={text}>
                JSON documents that define the permissions associated with
                users, groups, or roles.
              </li>
              <li className={text}>
                Policies determine what actions are allowed or denied on
                specific AWS resources.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Multi-Factor Authentication (MFA)</p>
            <ul>
              <li className={text}>
                An extra layer of security by requiring users to provide
                additional authentication factors, such as a temporary code or
                push notification generated by a virtual or physical MFA device.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Access Keys</p>
            <ul>
              <li className={text}>
                Used in IAM as credentials for programmatic access to AWS
                services through APIs or Software Development Kit (SDK).
              </li>
              <li className={text}>
                They are either used by an application or an individual using a
                command line interface.
              </li>{' '}
            </ul>
          </li>
          <li className={text}>
            <p>Fine-Grained Permissions</p>
            <ul>
              <li className={text}>
                IAM offers granular control over permissions, allowing us to
                specify permissions at the individual API operation level for
                any resources and services in our account (or others). Example:
                I want this user/role to be able to list objects in the S3
                bucket but I don&apos;t want them to be able to get anything
                from the bucket.
              </li>
              <li className={text}>
                Super powerful, when used correctly. This is how AWS hands off
                security in the cloud, while they are responsible for the
                security of the cloud.
              </li>{' '}
            </ul>
          </li>
        </ol>
        <h2>ARN Breakdown</h2>
        <p className={text}>
          ARNs are an essential part of provisioning those fine-grained
          permissions that were mentioned previously. It will also help to note
          that not all ARNs are created equal. By the following we&apos;ll learn
          how to assign permissions for resources using ARNs or adaptations of
          ARNs.
        </p>
        <div className={imageWrapper}>
          <Image
            alt="ARN Breakdown"
            loader={imageLoader}
            src={iamOne}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
        </div>

        <h2>Policy Breakdown</h2>
        <p className={text}>
        Below is an example of a policy that you will see in the wild. It is quite liberal in some of its statements and the actions they allow. Policies have a <code className={code}>Version</code> and <code className={code}>Statement</code>. The <code className={code}>Statement</code> property is a list of JSON objects. Let&apos;s examine it more closely.
        </p>
        <div className={imageWrapper}>
          <Image
            alt="IAM Policy One"
            loader={imageLoader}
            src={iamTwo}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
          <p className={altText}>AWS IAM Policy One</p>
        </div>
        <ul className={noDots}>
          <li className={text}>
            <p>Statement 1</p>
            <ul>
              <li className={text}>
              Allows all Get* actions (GetParameters and GetCommandInvocation) for Systems Manager on all resources in that service. It also allows all actions in Cloudformation on all resources in Cloudformation. When I say &ldquo;all resources&rdquo; I mean all resources in this account.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Roles</p>
            <ul>
              <li className={text}>
                Used to grant permissions to entities within AWS, meaning to
                services or external applications, rather than individual users.
              </li>
              <li className={text}>
                Roles allow secure access to resources without sharing long-term
                credentials. When dealing with roles we don&apos;t have to
                rotate access keys or keep up with credentials when using them.
              </li>
              <li className={text}>
                Users can assume a role that has permissions to do what they
                need. Roles can also assume roles.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Policies</p>
            <p>
              {' '}
              When we talk about IAM if users, groups, and roles are the bones,
              it could be argued that policies are the meat of IAM.
            </p>
            <ul>
              <li className={text}>
                JSON documents that define the permissions associated with
                users, groups, or roles.
              </li>
              <li className={text}>
                Policies determine what actions are allowed or denied on
                specific AWS resources.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Multi-Factor Authentication (MFA)</p>
            <ul>
              <li className={text}>
                An extra layer of security by requiring users to provide
                additional authentication factors, such as a temporary code or
                push notification generated by a virtual or physical MFA device.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Access Keys</p>
            <ul>
              <li className={text}>
                Used in IAM as credentials for programmatic access to AWS
                services through APIs or Software Development Kit (SDK).
              </li>
              <li className={text}>
                They are either used by an application or an individual using a
                command line interface.
              </li>{' '}
            </ul>
          </li>
          <li className={text}>
            <p>Fine-Grained Permissions</p>
            <ul>
              <li className={text}>
                IAM offers granular control over permissions, allowing us to
                specify permissions at the individual API operation level for
                any resources and services in our account (or others). Example:
                I want this user/role to be able to list objects in the S3
                bucket but I don&apos;t want them to be able to get anything
                from the bucket.
              </li>
              <li className={text}>
                Super powerful, when used correctly. This is how AWS hands off
                security in the cloud, while they are responsible for the
                security of the cloud.
              </li>{' '}
            </ul>
          </li>
        </ul>
        <div className={minus10LeftMargin}>
          <Tags
            tags={[
              'React',
              'context api',
              'front-end development',
              'lazy loading',
              'Software Engineering',
            ]}
          />
        </div>
      </div>
      <ReturnArrow />
    </div>
  );
}
