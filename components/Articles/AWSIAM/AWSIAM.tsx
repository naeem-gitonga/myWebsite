'use client';
import Image from 'next/image';

import PageHeader from '@/components/PageHeader/PageHeader';
import styles from '../Articles.module.scss';
import sharedStyles from '../../SharedCss/SharedCss.module.scss';
import Tags from '@/components/Tags/Tags';

import iamLogo from '@/components/pictures/iam.png';
import iamOne from '@/components/pictures/iam-1.png';
import iamTwo from '@/components/pictures/iam-2.png';
import iamThree from '@/components/pictures/iam-3.png';
import iamFour from '@/components/pictures/iam-4.png';

import { imageLoader } from '@/utils/imageLoader';
import ReturnArrow from '@/components/ReturnArrow/ReturnArrow';
import { ArticleDateTime } from '@/components/ArticleDateTime/ArticleDateTime';

export default function AWSIAM(): JSX.Element {
  const { innerWrapper, imageWrapper, altText, text, code, noDots, smaller } =
    styles;
  const { tenPadding, width75, minus10LeftMargin } = sharedStyles;

  return (
    <div id="aws-iam" className={`${tenPadding}`}>
      <PageHeader headerName="article" hideLinks={false} />
      <div className={`${width75} ${innerWrapper}`}>
        <h1>AWS IAM — Quick Dive/Quick Guide</h1>
        <ArticleDateTime imageUrl={'awsiam'} />
        <div className={imageWrapper}>
          <Image
            alt="IAM logo"
            loader={imageLoader}
            src={iamLogo}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
          <p className={altText}>AWS IAM Logo</p>
        </div>
        <p className={text}>
          At work I recently presented to a group of my peers on the subject of
          AWS IAM. I did so from the perspective of how we at Pluralsight use
          the service. Here you&apos;ll find an adapted version of that
          presentation. Let&apos;s dive right in!
        </p>
        <h2>What is IAM?</h2>
        <p className={text}>
          IAM is one of the many AWS services. It is an acronym for Identity and
          Access Management. As a key AWS service it helps you manage user
          identities and control access to your AWS resources. Those resources
          could be in: databases, EC2, S3, etc. It allows you to securely
          control who can access your resources, as well as what actions they
          can perform. For example, if we want a user to only be able to get
          data from a data store we can specify via an IAM policy that this
          user/role can only do that. Thereby, excluding the permissions of
          modifying and deleting. This is extremely powerful. It is based on the
          premise of least privilege.
        </p>
        <h2>Key Features and Concepts</h2>
        <ol>
          <li className={text}>
            <p>Users and Groups</p>
            <ul>
              <li className={text}>
                Represent people or applications that require access to AWS
                resources. Each user is assigned unique credentials to
                authenticate their identity.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Roles</p>
            <ul>
              <li className={text}>
                Used to grant permissions to entities within AWS, meaning to
                services or external applications, rather than individual users.
              </li>
              <li className={text}>
                Roles allow secure access to resources without sharing long-term
                credentials. When dealing with roles we don&apos;t have to
                rotate access keys or keep up with credentials when using them.
              </li>
              <li className={text}>
                Users can assume a role that has permissions to do what they
                need. Roles can also assume roles.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Policies</p>
            <p>
              {' '}
              When we talk about IAM if users, groups, and roles are the bones,
              it could be argued that policies are the meat of IAM.
            </p>
            <ul>
              <li className={text}>
                JSON documents that define the permissions associated with
                users, groups, or roles.
              </li>
              <li className={text}>
                Policies determine what actions are allowed or denied on
                specific AWS resources.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Multi-Factor Authentication (MFA)</p>
            <ul>
              <li className={text}>
                An extra layer of security by requiring users to provide
                additional authentication factors, such as a temporary code or
                push notification generated by a virtual or physical MFA device.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Access Keys</p>
            <ul>
              <li className={text}>
                Used in IAM as credentials for programmatic access to AWS
                services through APIs or Software Development Kit (SDK).
              </li>
              <li className={text}>
                They are either used by an application or an individual using a
                command line interface.
              </li>{' '}
            </ul>
          </li>
          <li className={text}>
            <p>Fine-Grained Permissions</p>
            <ul>
              <li className={text}>
                IAM offers granular control over permissions, allowing us to
                specify permissions at the individual API operation level for
                any resources and services in our account (or others). Example:
                I want this user/role to be able to list objects in the S3
                bucket but I don&apos;t want them to be able to get anything
                from the bucket.
              </li>
              <li className={text}>
                Super powerful, when used correctly. This is how AWS hands off
                security in the cloud, while they are responsible for the
                security of the cloud.
              </li>{' '}
            </ul>
          </li>
        </ol>
        <h2>ARN Breakdown</h2>
        <p className={text}>
          ARNs are an essential part of provisioning those fine-grained
          permissions that were mentioned previously. It will also help to note
          that not all ARNs are created equal. By the following we&apos;ll learn
          how to assign permissions for resources using ARNs or adaptations of
          ARNs.
        </p>
        <div className={imageWrapper}>
          <Image
            alt="ARN Breakdown"
            loader={imageLoader}
            src={iamOne}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
        </div>

        <h2>Policy Breakdown</h2>
        <p className={text}>
          Below is an example of a policy that you will see in the wild. It is
          quite liberal in some of its statements and the actions they allow.
          Policies have a <code className={code}>Version</code> and{' '}
          <code className={code}>Statement</code>. The{' '}
          <code className={code}>Statement</code> property is a list of JSON
          objects. Let&apos;s examine it more closely.
        </p>
        <div className={`${imageWrapper} ${smaller}`}>
          <Image
            alt="IAM Policy One"
            loader={imageLoader}
            src={iamTwo}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
          <p className={altText}>AWS IAM Policy One</p>
        </div>
        <ul className={noDots}>
          <li className={text}>
            <p>Statement 1</p>
            <ul>
              <li className={text}>
                Allows all <code className={code}>Get*</code> actions
                (GetParameters and GetCommandInvocation) for Systems Manager on
                all resources in that service. It also allows all actions in
                Cloudformation on all resources in Cloudformation. When I say
                &ldquo;all resources&rdquo; I mean all resources in this
                account.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Statement 2</p>
            <ul>
              <li className={text}>
                Allows all actions for S3 on all objects in S3 that this account
                owns and that begin with <code className={code}>cdk-</code>. The{' '}
                <code className={code}>*</code> matches any string — wildcard.
              </li>
              <li className={text}>
                Notice the differences in the ARN. It&apos;s missing the AWS
                region, account number, and the resource denotation. S3 being a
                global service is the reason.
              </li>
            </ul>
          </li>
          <li className={text}>
            <p>Statement 3</p>
            <ul>
              <li className={text}>
                Allows all actions for ECR on all resources in ECR — in this
                account.
              </li>
            </ul>
            <p className={text}>
              These statements have a{' '}
              <code className={code}>&quot;Sid&quot;</code> property. This
              property is optional and stands for statement ID. You can use it
              to help you quickly identify what the intentions for the statement
              are.
            </p>
            <p className={text}>
              Let&apos;s look at how we can drill down and achieve granularity
              with our provisions.
            </p>
          </li>
          <div className={imageWrapper}>
            <Image
              alt="IAM Policy Two"
              loader={imageLoader}
              src={iamThree}
              style={{ objectFit: 'contain', maxWidth: '75%' }}
              fill
            />
            <p className={altText}>AWS IAM Policy Two</p>
          </div>
        </ul>

        <p className={text}>
          The above policy contains one statement that allows the user/role that
          it is assigned to to <code className={code}>GetSecretValue</code> in
          Secrets Manager for all secrets that begin with{' '}
          <code className={code}>profile/</code> and{' '}
          <code className={code}>my-super-secret-credentials</code>. The{' '}
          <code className={code}>*</code> denotes that any string after would be
          considered as well. Next we&apos;ll review a basic trust policy.
        </p>

        <div className={imageWrapper}>
          <Image
            alt="IAM Trust Policy"
            loader={imageLoader}
            src={iamFour}
            style={{ objectFit: 'contain', maxWidth: '75%' }}
            fill
          />
          <p className={altText}>AWS IAM Trust Policy</p>
        </div>

        <p className={text}>
          It is mentioned above that roles can assume roles. A trust policy is
          how that is achieved. You see that this policy has one statement with
          two additions when compared with the two statements that were
          previously covered. Those additions are{' '}
          <code className={code}>Principal</code> and{' '}
          <code className={code}>Condition</code>.
        </p>

        <p className={text}>
          A Principal can be another AWS account or a CICD service (Github,
          Gitlab, etc.). In this example the{' '}
          <code className={code}>Principal</code> is a trusted federated
          identity provider — specifically Bitbucket.
        </p>

        <p className={text}>
          Let&apos;s further examine the <code className={code}>Federated</code>{' '}
          property of the <code className={code}>Principal</code> object in this
          policy&apos;s statement. We can see an ARN (given to us by AWS) for
          the Bitbucket OIDC provider.
        </p>

        <p className={text}>
          It allows this Bitbucket account&apos;s workspace pipeline the ability
          to assume the role that the trust policy is attached to. That means
          that this particular Bitbucket account will have, upon role
          assumption, the permissions allowed by the particular role that it
          assumes. Pretty cool, huh!?
        </p>

        <p className={text}>
          Now let&apos;s talk about the <code className={code}>Condition</code>.
          This condition has an audience <code className={code}>aud</code>
          that refers to the intended recipient of the ID token that will be
          given it. The audience is a claim within the ID token that specifies
          the client or service for which the token is intended. Audience claims
          serve as a security measure to ensure that ID tokens are only consumed
          by the intended recipient. The recipient in this case being the
          following resource:
          <code className={code}>
            ari:cloud:bitbuckt::workspace/9bb9a27q-19vi-4b3d-87fc-17898aa256611
          </code>
          . This too is has the format of an AWS resource number. Notice how it
          begins with <code className={code}>ari</code> versus{' '}
          <code className={code}>arn</code>. It belongs to{' '}
          <code className={code}>cloud</code>. The service is
          <code className={code}>bitbucket</code>. Apparently there is no
          account number is referenced and there is no specified region, as
          bitbucket is global. The workspace however does have a universally
          unique identifier (UUID).
        </p>
        <h2>How can IAM be leveraged?</h2>
        <p className={text}>
          Well, we&apos;ve covered some things but AWS can be integrated with
          and used in conjunction with other identity providers. You can use SSO
          or the new IAM Identity Center. Roles are the preferred method to use
          when dealing with users at scale. At Pluralsight, we use a third party
          to manage users versus doing so through IAM. This helps to avoid the
          burden of managing a host of credentials for the respective
          users/groups and allows for easier on- and off-boarding. It helps when
          managing thousands of users to use this approach to role-based access
          management.
        </p>

        <p className={text}>
          Other than for humans, this can also be applied to third-party
          services like the various CICD tools. Having roles that assume roles
          may seem redundant but it creates layers of security and easier
          governance for least privilege.
        </p>
        <p className={text}>Thanks for reading!</p>
        <div className={minus10LeftMargin}>
          <Tags
            tags={[
              'AWS',
              'AWS IAM',
              'DevOps',
              'Identity Management',
              'Enterprise Architecture',
              'Enterprise Software',
            ]}
          />
        </div>
      </div>
      <ReturnArrow />
    </div>
  );
}
