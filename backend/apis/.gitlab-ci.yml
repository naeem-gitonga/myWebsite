stages:
  - test
  - build
  - deploy

.common_setup: &common_setup
  - cd backend/cdk
  - npm i
  - npm i -g aws-cdk typescript ts-node serverless dotenv serverless-dotenv-plugin

.install_aws: &install_aws
  - apt update
  - apt install -y jq
  - curl -k "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip "awscliv2.zip"
  - ./aws/install

.common_install: &common_install
  - cd backend/apis
  - npm i 
  - npm i -g serverless dotenv serverless-dotenv-plugin

.assume_role: &assume_role
  - >
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token ${GITLAB_OIDC_TOKEN}
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity

image: node:20.11.1

# test_lambda:
#   stage: test
#   rules:
#     - changes:
#         - $PWD/app/**/*
#         - $PWD/components/**/*
#         - $PWD/hooks/**/*
#         - $PWD/pages/**/*
#         - $PWD/utils/**/*
#         - $PWD/next.config.js
#         - $PWD/package.json
#         - $PWD/vercel.json
#         - $PWD/.gitlab-ci.yml
#       when: never
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: never
#     - changes:
#         - backend/apis/**/*
#         - backend/cdk/lib/*
#         - backend/cdk/bin/*
#   script:
#     - *common_install
#     - npm run test

build_staging:
  stage: build
  environment: staging
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "staging"'
      changes:
        - backend/apis/**/*
        - backend/cdk/**/*
    - changes:
        - $PWD/app/**/*
        - $PWD/components/**/*
        - $PWD/hooks/**/*
        - $PWD/pages/**/*
        - $PWD/utils/**/*
        - $PWD/next.config.js
        - $PWD/package.json
        - $PWD/vercel.json
        - $PWD/.gitlab-ci.yml
      when: never
  artifacts:
    expose_as: 'backend-build-staging'
    name: 'backend-build-staging'
    paths:
      - $PWD/backend/apis/.serverless/jngpaypal.zip
  # dependencies:
  #   - test_lambda
  script:
    - *common_install
    - touch .env
    - |
      variables=(
        "ORIGIN=${ORIGIN}"
        "SEND_GRID_API_KEY=${SEND_GRID_API_KEY}"
        "ACCESS_KEY_ID=${ACCESS_KEY_ID}"
        "SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}"
        "WHICH_ROUTE=${WHICH_ROUTE}"
        "NODE_ENV=staging"
        "STAGE"="prod"
      )
      env_file="./.env"
      for var in "${variables[@]}"; do
        echo "$var" >> "$env_file"
      done
    - npm run package

deploy_staging_backend:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: deploy
  environment: staging
  rules:
    - changes:
        - $PWD/app/**/*
        - $PWD/components/**/*
        - $PWD/hooks/**/*
        - $PWD/pages/**/*
        - $PWD/utils/**/*
        - $PWD/next.config.js
        - $PWD/package.json
        - $PWD/vercel.json
        - $PWD/.gitlab-ci.yml
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "staging"'
      changes:
        - backend/apis/**/*
        - backend/cdk/**/*
  dependencies:
    - build_staging
  script:
    - *install_aws
    - *common_setup
    - *assume_role
    - npm i
    - |
      variables=(
        "ACCESS_KEY_ID=${ACCESS_KEY_ID}"
        "CALENDLY_API_ACCESS_TOKEN=${CALENDLY_API_ACCESS_TOKEN}"
        "NODE_ENV=staging"
        "ORIGIN=${ORIGIN}"
        "SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}"
        "SEND_GRID_API_KEY=${SEND_GRID_API_KEY}"
        "STAGE=prod"
        "WHICH_ROUTE=${WHICH_ROUTE}"
      )
      env_file="./.env"
      for var in "${variables[@]}"; do
        echo "$var" >> "$env_file"
      done
    - cdk deploy --require-approval=never --role-arn ${INFRASTRUCTURE_ROLE_ARN}

build_production:
  stage: build
  environment: production
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - backend/apis/**/*
        - backend/cdk/**/*
    - changes:
        - $PWD/app/**/*
        - $PWD/components/**/*
        - $PWD/hooks/**/*
        - $PWD/pages/**/*
        - $PWD/utils/**/*
        - $PWD/next.config.js
        - $PWD/package.json
        - $PWD/vercel.json
        - $PWD/.gitlab-ci.yml
      when: never
  artifacts:
    expose_as: 'backend-build-production'
    name: 'backend-build-production'
    paths:
      - $PWD/backend/apis/.serverless/jngpaypal.zip
  # dependencies:
  #   - test_lambda
  script:
    - *common_install
    - yarn add global dotenv yaml
    - yarn
    - touch .env
    - |
      variables=(
        "ORIGIN=${ORIGIN}"
        "SEND_GRID_API_KEY=${SEND_GRID_API_KEY}"
        "ACCESS_KEY_ID=${ACCESS_KEY_ID}"
        "SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}"
        "WHICH_ROUTE=${WHICH_ROUTE}"
        "NODE_ENV=production"
        "STAGE"="prod"
      )
      env_file="./.env"
      for var in "${variables[@]}"; do
        echo "$var" >> "$env_file"
      done
    - yarn run package

deploy_production_backend:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  stage: deploy
  environment: production
  rules:
    - changes:
        - $PWD/app/**/*
        - $PWD/components/**/*
        - $PWD/hooks/**/*
        - $PWD/pages/**/*
        - $PWD/utils/**/*
        - $PWD/next.config.js
        - $PWD/package.json
        - $PWD/vercel.json
        - $PWD/.gitlab-ci.yml
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - backend/apis/**/*
        - backend/cdk/**/*
  dependencies:
    - build_production
  script:
    - *install_aws
    - *common_setup
    - *assume_role
    - npm i && npm i -g serverless
    - |
      variables=(
        "ACCESS_KEY_ID=${ACCESS_KEY_ID}"
        "CALENDLY_API_ACCESS_TOKEN=${CALENDLY_API_ACCESS_TOKEN}"
        "NODE_ENV=production"
        "ORIGIN=${ORIGIN}"
        "SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}"
        "SEND_GRID_API_KEY=${SEND_GRID_API_KEY}"
        "STAGE=prod"
        "WHICH_ROUTE=${WHICH_ROUTE}"
      )
      env_file="./.env"
      for var in "${variables[@]}"; do
        echo "$var" >> "$env_file"
      done
    - cdk deploy --require-approval=never --role-arn ${INFRASTRUCTURE_ROLE_ARN}
